function [] = frodoProtocols( exptInfo, preExptData )
%FRODOPROTOCOLS function that runs experimental protocols written for rig
%frodo in 135
% The user is prompted with a list of all the optional protocols to run.
%
% Yvette Fisher 1/2022

while 1
    ephysSettings;

    % get user to pick wanted stimulus
    GETSTIMULUSNAME = true; 
    while(GETSTIMULUSNAME)

        prompt = ['Which stimulus would you like to run? Options:q,noCurrent(dur),step(amp,dur),stepLoop(amp,dur,reps),\n' ...
            'currentSteps(lowerAmp,upperAmp,(opt:numSteps,stimDur,isi)),currentStepsUp(currentStepAmplitude,stepDurationSec,numSteps),\n' ...
            'currentRamp(endCurrent,lengthTrialSec),LEDstim(stim,isi,reps),LEDstim_currInject(stim,isi,inject,offset,reps),\n' ...
            'LEDstim_offPeriod(stim,isi,reps,offPeriodStartSec,offPeriodDurMin),n=exit: '];
        % Ask user for stimulus command to run
        choosenStimulus = input( prompt, 's');

        try
            % evaluate stimulus contruction code and obtain the current command wave form to be used.
            stimulus = eval(choosenStimulus);
            stimulus.name = choosenStimulus; % Also store information about the stimulus name and waveform

            GETSTIMULUSNAME = false; % If eval ran without breaking, exit this loop and continue on with the rest of the code
        catch
            if(choosenStimulus == 'n'); break; end % exit this loop if 'n' was entered and user wants to quit...

            disp(['ERROR: there is a problem with the stimulus comman' ...
                'd you entered, please try to enter it again :)  ']);
        end
    end

    % break out of code if 'n' was entered and user wants to quit...
    if(choosenStimulus == 'n')
        break;
    end % exit whole set of code

    % option to add a pulse at the beginning of the trial to measure input resistance
    pulsePrompt = ['Do you want to include a pulse at the beginning of the trial? '];
    pulseAns = input( pulsePrompt, 's');

    if pulseAns == 'y'
        PULSE_AMPLITUDE = -2; %pA
        PULSE_DURATION = 0.5; %sec
        [ pulseCommandArray ] =  currentStepPulse( PULSE_AMPLITUDE, PULSE_DURATION );
        stimulus.command.output = [ pulseCommandArray stimulus.command.output ];
    end

    % plot command, and Trigger signal that are in stimulus
    plotCommandSignals( stimulus );

    % Aquire a trial
    [data] = acquireTrial(stimulus, exptInfo, preExptData);
end

end
%% Frodo ephy rig protocols functions
%% q
function [out] = q( )
% quick function that records for 15 seconds
ephysSettings;
% trial duration
TRIAL_DURATION = 15; %seconds

fprintf('Running the no injection 15 second function');
commandArray = zeros(1,TRIAL_DURATION*rigSettings.sampRate);
out.command = buildOutputSignal('command', commandArray);
end

%% WRITE NEW FUNCTION HERE!!! with any inputs you like and out.command as the output for current injections in voltage correctly correspoding to the external output current
%% noCurrent(dur)
function [out] = noCurrent(dur)
% quick function that records for 15 seconds
ephysSettings;
% trial duration
TRIAL_DURATION = dur; %seconds

fprintf('Running the no injection 15 second function');
commandArray = zeros(1,TRIAL_DURATION*rigSettings.sampRate);
out.command = buildOutputSignal('command', commandArray);
end

%% step
function [out] = step( amp, dur, offDur )
% step runs a trial with a single step of
% amp = amplitude of the step in pA
% dur = durations of the step in seconds
% offDur = duration of time before and after step
ephysSettings;
PRE_STEP_DURATION = offDur; % seconds
STEP_DURATION = dur; % seconds
STEP_AMP = amp; % pA

preStepCommand = zeros(1, PRE_STEP_DURATION * rigSettings.sampRate );

stepCommand = STEP_AMP * ones( 1, STEP_DURATION * rigSettings.sampRate );

injectionCommand = [preStepCommand stepCommand preStepCommand];

commandArray = injectionCommand * rigSettings.command.currentClampExternalCommandGain; % send full command out, in Voltage for the daq to send
out.command = buildOutputSignal('command', commandArray);
end


%% stepLoop -multiple current steps at the same amplitude
function [out] = stepLoop ( amp, dur, reps )
% step runs a quick trial with a single step of
% amp = amplitude of the step in pA
% dur = durations of the step in seconds
% for as many times as is specified in reps
ephysSettings;
PRE_STEP_DURATION = 2; % seconds
STEP_DURATION = dur; % seconds
STEP_AMP = amp; % pA

injectionCommand = [];
for i = 1: reps
    preStepCommand = zeros(1, PRE_STEP_DURATION * rigSettings.sampRate );
    stepCommand = STEP_AMP * ones( 1, STEP_DURATION * rigSettings.sampRate );
    injectionCommand = [injectionCommand preStepCommand stepCommand];
end

injectionCommand = [ injectionCommand zeros(1, PRE_STEP_DURATION * rigSettings.sampRate ) ];

commandArray = injectionCommand * rigSettings.command.currentClampExternalCommandGain; % send full command out, in Voltage for the daq to send
out.command = buildOutputSignal('command', commandArray);
end


%% currentSteps -multiple current steps between two user-entered current bounds. Returns to 0 between each step
function [out] = currentSteps( lowerCurrentBound, upperCurrentBound, varargin )

ephysSettings;

if length(varargin) > 0
    variableInputs = varargin;
    NUMBER_OF_STEPS = variableInputs{1}; % seconds
    STEP_DURATION = variableInputs{2};
    INTERSTIMINTERVAL = variableInputs{3}; % seconds
else
    NUMBER_OF_STEPS = 10;
    STEP_DURATION = 1; % seconds
    INTERSTIMINTERVAL = 1; % seconds
end

%stepAmplitudeChange = (upperCurrentBound -
%lowerCurrentBound)/(NUMBER_OF_STEPS-1); %pA I'm not sure why there's a -1
%to the numSteps........
stepAmplitudeChange = (upperCurrentBound - lowerCurrentBound)/(NUMBER_OF_STEPS); %pA

injectionCommand = [];
for i = 1: NUMBER_OF_STEPS
    preStepCommand = zeros(1, INTERSTIMINTERVAL * rigSettings.sampRate );
    currentStepAmplitudes = lowerCurrentBound + (stepAmplitudeChange*(i-1));
    stepCommand = currentStepAmplitudes * ones( 1, STEP_DURATION * rigSettings.sampRate );
    injectionCommand = [injectionCommand preStepCommand stepCommand];
end

injectionCommand = [ injectionCommand zeros(1, INTERSTIMINTERVAL * rigSettings.sampRate) ];

commandArray = injectionCommand * rigSettings.command.currentClampExternalCommandGain; % send full command out, in Voltage for the daq to send
out.command = buildOutputSignal('command', commandArray);
end


%% currentStepsUp -current steps up without returning to 0 between steps
function [out] = currentStepsUp( currentStepAmplitude , stepDurationSec , numSteps )

ephysSettings;

injectionCommand = [];
for i = 1: numSteps
    currentStep = currentStepAmplitude*(i-1);
    stepCommand = currentStep * ones( 1, stepDurationSec * rigSettings.sampRate );
    injectionCommand = [injectionCommand stepCommand];
end

commandArray = injectionCommand * rigSettings.command.currentClampExternalCommandGain; % send full command out, in Voltage for the daq to send
out.command = buildOutputSignal('command', commandArray);
end

% old code for when this function calculated current to inject based on
% input resistance

% ( inputResistance , startVoltage , endVoltage , voltageStepAmplitude , stepDuration )

% VOLTS_PER_MiliVOLTS = 1e-3; % V /1000 mV
% AMPS_PER_pA = 1e-12; % 1e-12 A / 1 pA
% MEGAOHM_PER_OHM = 1e-6; % 1 MOhm / 1e6 Ohm

% [data,~] = acquireTrial;
% startVoltage = mean(data.voltage);
% startVoltage = -65; %mV

% inputResistance = preExptData.initialInputResistance / MEGAOHM_PER_OHM;
% inputResistance = 542 / MEGAOHM_PER_OHM; 
% inputResistance = inputResistance / MEGAOHM_PER_OHM;
% 
% voltageChange = abs(endVoltage - startVoltage); %mV
% numSteps = floor( voltageChange / voltageStepAmplitude ) + 1;
% 
% injCurrentForVoltageStep = ((voltageStepAmplitude * VOLTS_PER_MiliVOLTS) / inputResistance ) / AMPS_PER_pA; %pA


%% currentRamp -gradually inject current to reach a certain membrane voltage. Current needed to get to voltage calculated using input resistance.
function [out] = currentRamp( endCurrent , lengthTrialSec )

ephysSettings;

numSteps = lengthTrialSec * rigSettings.sampRate;
injCurrentForSteps = endCurrent / numSteps;

injectionCommand = [ 0:injCurrentForSteps:endCurrent ];

preStepCommand = zeros(1, 30 * rigSettings.sampRate ); % 30 sec of baseline before ramp
injectionCommand = [ preStepCommand injectionCommand ];

commandArray = injectionCommand * rigSettings.command.currentClampExternalCommandGain; % send full command out, in Voltage for the daq to send
out.command = buildOutputSignal('command', commandArray);
end

% old code for when this function calculated current to inject based on
% input resistance

% ( inputResistance , startVoltage , endVoltage , lengthTrialSec )

% VOLTS_PER_MiliVOLTS = 1e-3; % V /1000 mV
% AMPS_PER_pA = 1e-12; % 1e-12 A / 1 pA
% MEGAOHM_PER_OHM = 1e-6; % 1 MOhm / 1e6 Ohm

% [data,~] = acquireTrial;
% startVoltage = mean(data.voltage);
% startVoltage = -65; %mV

% inputResistance = preExptData.initialInputResistance / MEGAOHM_PER_OHM;
% inputResistance = 542 / MEGAOHM_PER_OHM; 
% inputResistance = inputResistance / MEGAOHM_PER_OHM;

% injCurrentForEndVoltage = (((endVoltage - startVoltage)*VOLTS_PER_MiliVOLTS) / inputResistance) / AMPS_PER_pA; %pA
% injCurrentForVoltageStep = injCurrentForEndVoltage / numSteps;

% injectionCommand = [ 0:injCurrentForVoltageStep:injCurrentForEndVoltage ];

%%
function [out] = LEDstim( stimInterval_sec, interStimInterval_sec, reps)
ephysSettings;

LEDLogical = zeros(1, interStimInterval_sec * rigSettings.sampRate); % intitial interval with LED off

for i = 1:reps
    LEDLogical = [LEDLogical ones(1, stimInterval_sec * rigSettings.sampRate) zeros(1, interStimInterval_sec * rigSettings.sampRate)];
end

% LED output channel
out.LEDcommand = buildOutputSignal('LEDcommand',LEDLogical);

% command output channel
commandArray = zeros(1, length(LEDLogical));
out.command = buildOutputSignal('command', commandArray);
end


%%
function [out] = LEDstim_currInject( stimInterval_sec, interStimInterval_sec, inject_pA, offsetShift_sec,  reps)
% LEDstim_currInject
% stimInterval_sec - amount of LED stim time 
% interStimInterval_sec - time between stimulution
% inject_pA - how much current to inject for same interval and cadence as
% LED stim
% offsetShift_sec - seconds to offset the LED and current traces 
% by e.g. 0= correlated, 0.1 = current lags LED by 100ms
% reps = number of times to repeat.
ephysSettings;

LEDLogical = zeros(1, interStimInterval_sec * rigSettings.sampRate); % intitial interval with LED off

for i = 1:reps
    LEDLogical = [LEDLogical ones(1, stimInterval_sec * rigSettings.sampRate) zeros(1, interStimInterval_sec * rigSettings.sampRate)];
end

% LED output channel
out.LEDcommand = buildOutputSignal('LEDcommand',LEDLogical);

currLogical = circshift(LEDLogical, offsetShift_sec*rigSettings.sampRate); % shift the current trace offset from the LED trace
% command output channel
commandArray = currLogical * inject_pA * rigSettings.command.currentClampExternalCommandGain; % send full command out, in Voltage for the daq to send
out.command = buildOutputSignal('command', commandArray);
end


%%
function [out] = LEDstim_break( stimInterval_sec, interStimInterval_sec, reps, breakDurSec)
ephysSettings;

LEDLogical = zeros(1, interStimInterval_sec * rigSettings.sampRate); % initial interval with LED off

for i = 1:reps
    LEDLogical = [LEDLogical ones(1, stimInterval_sec * rigSettings.sampRate) zeros(1, interStimInterval_sec * rigSettings.sampRate)];
end

offPeriod = breakDurS

% LED output channel
out.LEDcommand = buildOutputSignal('LEDcommand',LEDLogical);

% command output channel
commandArray = zeros(1, length(LEDLogical));
out.command = buildOutputSignal('command', commandArray);
end


%%
function [out] = LEDstim_offPeriod( stimInterval_sec, interStimInterval_sec, reps , offPeriodStart_sec , offPeriodDuration_min )
ephysSettings;

LEDLogical = zeros(1, interStimInterval_sec * rigSettings.sampRate); % intiial interval with LED off

for i = 1:reps
    LEDLogical = [LEDLogical ones(1, stimInterval_sec * rigSettings.sampRate) zeros(1, interStimInterval_sec * rigSettings.sampRate)];
end

offPeriodStartIndex = offPeriodStart_sec * rigSettings.sampRate;
offPeriodEnd_sec = offPeriodStart_sec + (offPeriodDuration_min*60);
offPeriodEndIndex = offPeriodEnd_sec * rigSettings.sampRate;

if offPeriodEndIndex > length(LEDLogical)
    warning('Off period duration is longer than whole trial');
    return
end

LEDLogical ( offPeriodStartIndex:offPeriodEndIndex ) = 0;

% LED output channel
out.LEDcommand = buildOutputSignal('LEDcommand',LEDLogical);

% command output channel
commandArray = zeros(1, length(LEDLogical));
out.command = buildOutputSignal('command', commandArray);
end


%%
function [out]= makeInjectionWaveform (InjpA,BaseDur,PulseDur,PostDur)
%Injects Current for given Duration(s)
ephysSettings;
% makeInjectionWaveform function to inject current
InjectionBaseSamples = rigSettings.sampRate*BaseDur; % Hz=samples/sec
InjectionPulseSamples = rigSettings.sampRate*PulseDur;
InjectionPostSamples = rigSettings.sampRate*PostDur;

%Volts = ampGain*(InjpA/1000); %Voltage injection (1nA=1000pA)
%Volts = InjpA/ampGain;

Array_Base = [zeros(1,InjectionBaseSamples)]; %array Baseline values 0pA
Array_Inj = InjpA*[ones(1,InjectionPulseSamples)]; %array Injection Voltage values ?pA
Array_Post = [zeros(1,InjectionPostSamples)]; %array Post-injection values 0pA
fprintf('Running the single set current injection protocol');
commandArray = [Array_Base,Array_Inj,Array_Post] * rigSettings.command.currentClampExternalCommandGain; % send full command out, in Voltage for the daq to send
out.command = buildOutputSignal('command', commandArray);
end


%% Inject step current
function [out] = summation(X,Y,Z,BaseDur,PulseDur,PostDur) %where x,y,z is current injected and by what steps
% Syntax
ephysSettings;
InjectionBaseSamples = rigSettings.sampRate*BaseDur; % Hz=samples/sec
InjectionPulseSamples = rigSettings.sampRate*PulseDur;
InjectionPostSamples = rigSettings.sampRate*PostDur;
% Initilising loop to be zero
Voltstep = 0;
CurrentToInject = X:Y:Z;
stepArray = [];
for i = 1:length(CurrentToInject)
    % loop
    %Voltstep = CurrentToInject(i)/ampGain;

    Array_Base = [zeros(1,InjectionBaseSamples)]; %array Baseline values 0pA
    Array_Inj = CurrentToInject(i)*[ones(1,InjectionPulseSamples)]; %array Injection Voltage values ?pA
    Array_Post = [zeros(1,InjectionPostSamples)]; %array Post-injection values 0pA

    stepArray = [stepArray, Array_Base,Array_Inj,Array_Post];
   
end

fprintf('Running the multiple current injection protocol');
commandArray = stepArray * rigSettings.command.currentClampExternalCommandGain; % send full command out, in Voltage for the daq to send
out.command = buildOutputSignal('command', commandArray);
end


%% Inject Step Current multiple times throughout run

%15-20 minute run with baseline and step Current recordings; add ATP around
%the 4 minute mark
function [out] = wholeProtocol(X,Y,Z,BaseDur,PulseDur,PostDur) %where x,y,z is current injected and by what steps
%BaseDur and PostDur at 60 seconds = T(2n+1) where n is sec base and T is
%number of current injections
% Syntax
ephysSettings;
%All the noCurrent baseline variables
BaselineOne = rigSettings.sampRate*60; % Hz=samples/sec; set as 60s
BaselineTwo = rigSettings.sampRate*180; % Hz=samples/sec; set as 120s
postOne = rigSettings.sampRate*360; % Hz=samples/sec; set as 420 (8min)
postTwo = rigSettings.sampRate*120; % Hz=samples/sec; set as 120s

%Injection baseline variables
InjectionBaseSamples = rigSettings.sampRate*BaseDur; % Hz=samples/sec
InjectionPulseSamples = rigSettings.sampRate*PulseDur;
InjectionPostSamples = rigSettings.sampRate*PostDur;

%NoCurrent zeroArrays
Array_BaselineOne = [zeros(1,BaselineOne)]; %array Baseline values 0pA
Array_BaselineTwo = [zeros(1,BaselineTwo)]; %array Baseline values 0pA
Array_postOne = [zeros(1,postOne)]; %array Baseline values 0pA
Array_postTwo = [zeros(1,postTwo)]; %array Baseline values 0pA

% Initialising loopBaseline to be zero
Voltstep = 0;
CurrentToInject = X:Y:Z;
stepArray = [];
for i = 1:length(CurrentToInject)
    % loop
    %Voltstep = CurrentToInject(i)/ampGain;

    Array_Base = [zeros(1,InjectionBaseSamples)]; %array Baseline values 0pA
    Array_Inj = CurrentToInject(i)*[ones(1,InjectionPulseSamples)]; %array Injection Voltage values ?pA
    Array_Post = [zeros(1,InjectionPostSamples)]; %array Post-injection values 0pA

    stepArray = [stepArray, Array_Base,Array_Inj,Array_Post];
   
end
finalArray = [Array_BaselineOne stepArray Array_BaselineTwo stepArray Array_postOne stepArray Array_postTwo];
fprintf('Running the 15-20 minute multiple current injection protocol');
commandArray = finalArray * rigSettings.command.currentClampExternalCommandGain; % send full command out, in Voltage for the daq to send
out.command = buildOutputSignal('command', commandArray);
end


%%
function [pulseCommandArray] = currentStepPulse( pulseAmp, pulseDur )
ephysSettings;

BREAK_DURATION = 0.05; %sec

breakStepCommand = zeros(1, BREAK_DURATION * rigSettings.sampRate );

stepCommand = pulseAmp * ones( 1, pulseDur * rigSettings.sampRate );

pulseCommand = [breakStepCommand stepCommand breakStepCommand];

pulseCommandArray = pulseCommand * rigSettings.command.currentClampExternalCommandGain; % send full command out, in Voltage for the daq to send

end


%% 
function [] = plotCommandSignals( stimulus )
% PLOTCOMMANDSIGNALS Plotting helper function
% Takes stimulus and parces which of these is an array
% plot all array, subfields in a figure to show the pattern to the user
% Yvette Fisher 2/2017
figure();
fields = fieldnames(stimulus);
% Loop over struct and plot any field that is not itself a struct
for i = 1:length(fields)
    % string of current Field
    currField = fields{i};
    % check that field is not a param struct or the name field
    if ( ~strcmp(currField,'name') )
        % plot array on figure
        plot( stimulus.(currField).output ); hold on;
    end
end

% adds a title with stimulus' name
title(stimulus.name);
end